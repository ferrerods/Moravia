#pragma checksum "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7832944307b6e9b3e6d1b0284ca6080a78162d58"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Chess_Index), @"mvc.1.0.view", @"/Views/Chess/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\_ViewImports.cshtml"
using ChessProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\_ViewImports.cshtml"
using ChessProject.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7832944307b6e9b3e6d1b0284ca6080a78162d58", @"/Views/Chess/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"73257267b64b6b73dd6cf50296c0638adfe15d05", @"/Views/_ViewImports.cshtml")]
    public class Views_Chess_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<ChessProject.Models.Square>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
  
    ViewData["Title"] = "Chess";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Chess</h1>
<h4>Are you ready to play?</h4>
<fom id=""formChess"" method=""post"">
    <input type=""button"" id=""newGame"" value=""Go!"" />
</fom>

<p></p>
<fom id=""formInsertPiece"" method=""post"">
    <label>
        Enter the coordinates of the chess piece selected:
    </label>
    <input type=""text"" id=""pieceSelected"" class=""input-group-text"" />
    <label>
        Enter the coordinates of the new position:
    </label>
    <input type=""text"" id=""positionSelected"" class=""input-group-text"" />
</fom>

<div class=""board"">
    <table class=""table"">
        <thead>
            <tr>
                <th scope=""col""></th>
                <th scope=""col"">a</th>
                <th scope=""col"">b</th>
                <th scope=""col"">c</th>
                <th scope=""col"">d</th>
                <th scope=""col"">e</th>
                <th scope=""col"">f</th>
                <th scope=""col"">g</th>
                <th scope=""col"">h</th>
            </tr>
        </thead>
        <tbody>
     ");
            WriteLiteral("       <tr>\r\n                <th>8</th>\r\n                <td id=\"8a\" class=\"square\">");
#nullable restore
#line 42 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[63].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8b\" class=\"squareDark\">");
#nullable restore
#line 43 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[62].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8c\" class=\"square\">");
#nullable restore
#line 44 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[61].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8d\" class=\"squareDark\">");
#nullable restore
#line 45 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[60].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8e\" class=\"square\">");
#nullable restore
#line 46 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[59].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8f\" class=\"squareDark\">");
#nullable restore
#line 47 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[58].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8g\" class=\"square\">");
#nullable restore
#line 48 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[57].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"8h\" class=\"squareDark\">");
#nullable restore
#line 49 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[56].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>7</th>\r\n                <td id=\"7a\" class=\"squareDark\">");
#nullable restore
#line 53 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[55].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7b\" class=\"square\">");
#nullable restore
#line 54 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[54].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7c\" class=\"squareDark\">");
#nullable restore
#line 55 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[53].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7d\" class=\"square\">");
#nullable restore
#line 56 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[52].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7e\" class=\"squareDark\">");
#nullable restore
#line 57 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[51].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7f\" class=\"square\">");
#nullable restore
#line 58 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[50].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7g\" class=\"squareDark\">");
#nullable restore
#line 59 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[49].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"7h\" class=\"square\">");
#nullable restore
#line 60 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[48].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>6</th>\r\n                <td id=\"6a\" class=\"square\">");
#nullable restore
#line 64 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[47].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6b\" class=\"squareDark\">");
#nullable restore
#line 65 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[46].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6c\" class=\"square\">");
#nullable restore
#line 66 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[45].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6d\" class=\"squareDark\">");
#nullable restore
#line 67 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[44].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6e\" class=\"square\">");
#nullable restore
#line 68 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[43].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6f\" class=\"squareDark\">");
#nullable restore
#line 69 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[42].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6g\" class=\"square\">");
#nullable restore
#line 70 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[41].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"6h\" class=\"squareDark\">");
#nullable restore
#line 71 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[40].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>5</th>\r\n                <td id=\"5a\" class=\"squareDark\">");
#nullable restore
#line 75 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[39].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5b\" class=\"square\">");
#nullable restore
#line 76 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[38].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5c\" class=\"squareDark\">");
#nullable restore
#line 77 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[37].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5d\" class=\"square\">");
#nullable restore
#line 78 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[36].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5e\" class=\"squareDark\">");
#nullable restore
#line 79 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[35].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5f\" class=\"square\">");
#nullable restore
#line 80 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[34].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5g\" class=\"squareDark\">");
#nullable restore
#line 81 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[33].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"5h\" class=\"square\">");
#nullable restore
#line 82 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[32].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>4</th>\r\n                <td id=\"4a\" class=\"square\">");
#nullable restore
#line 86 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[31].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4b\" class=\"squareDark\">");
#nullable restore
#line 87 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[30].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4c\" class=\"square\">");
#nullable restore
#line 88 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[29].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4d\" class=\"squareDark\">");
#nullable restore
#line 89 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[28].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4e\" class=\"square\">");
#nullable restore
#line 90 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[27].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4f\" class=\"squareDark\">");
#nullable restore
#line 91 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[26].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4g\" class=\"square\">");
#nullable restore
#line 92 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[25].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"4h\" class=\"squareDark\">");
#nullable restore
#line 93 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[24].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>3</th>\r\n                <td id=\"3a\" class=\"squareDark\">");
#nullable restore
#line 97 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[23].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3b\" class=\"square\">");
#nullable restore
#line 98 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[22].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3c\" class=\"squareDark\">");
#nullable restore
#line 99 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[21].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3d\" class=\"square\">");
#nullable restore
#line 100 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[20].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3e\" class=\"squareDark\">");
#nullable restore
#line 101 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[19].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3f\" class=\"square\">");
#nullable restore
#line 102 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[18].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3g\" class=\"squareDark\">");
#nullable restore
#line 103 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[17].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"3h\" class=\"square\">");
#nullable restore
#line 104 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[16].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>2</th>\r\n                <td id=\"2a\" class=\"square\">");
#nullable restore
#line 108 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[15].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2b\" class=\"squareDark\">");
#nullable restore
#line 109 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[14].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2c\" class=\"square\">");
#nullable restore
#line 110 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[13].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2d\" class=\"squareDark\">");
#nullable restore
#line 111 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[12].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2e\" class=\"square\">");
#nullable restore
#line 112 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[11].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2f\" class=\"squareDark\">");
#nullable restore
#line 113 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[10].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2g\" class=\"square\">");
#nullable restore
#line 114 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[9].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"2h\" class=\"squareDark\">");
#nullable restore
#line 115 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[8].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n            <tr>\r\n                <th>1</th>\r\n                <td id=\"1a\" class=\"squareDark\">");
#nullable restore
#line 119 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[7].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1b\" class=\"square\">");
#nullable restore
#line 120 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[6].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1c\" class=\"squareDark\">");
#nullable restore
#line 121 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[5].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1d\" class=\"square\">");
#nullable restore
#line 122 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[4].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1e\" class=\"squareDark\">");
#nullable restore
#line 123 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[3].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1f\" class=\"square\">");
#nullable restore
#line 124 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[2].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1g\" class=\"squareDark\">");
#nullable restore
#line 125 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                          Write(ViewBag.Square[1].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                <td id=\"1h\" class=\"square\">");
#nullable restore
#line 126 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                                      Write(ViewBag.Square[0].ImgPiece);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(function () {

            var pieceSelected = """";
            var positionInitial = """";
            var positionSelected = """";
            var pieceInPositionSeleted = """";
            var row = []
            row = (""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"");

            $(""#pieceSelected"").prop('disabled', true);
            $(""#positionSelected"").prop('disabled', true);

            $(""#newGame"").click(function (event) {
                //$("".board .table tbody td"").empty();
                location.href = '");
#nullable restore
#line 148 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
                            Write(Url.Action("NewGame", "Chess"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n            });\r\n\r\n            if (\'");
#nullable restore
#line 151 "C:\Users\Dalila\source\repos\Moravia\ChessProject\Views\Chess\Index.cshtml"
            Write(TempData["mensaje"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == ""redirect"") {
                //$("".board .table tbody td"").empty();
                $(""#pieceSelected"").prop('disabled', false);
                $(""#positionSelected"").prop('disabled', false);
            }

            $(""#pieceSelected"").change(function () {
                var varEntryInitial = $(""#pieceSelected"").val();
                var idSquareInitial = ConvertIdAndValidate(varEntryInitial);
                var pieceSeletedInitial = $(idSquareInitial)[0].innerText; 
                positionInitial = idSquareInitial;
                pieceSelected = pieceSeletedInitial;
            });

            $(""#positionSelected"").change(function () {
                var varEntry = $(""#positionSelected"").val();
                var idSquare = ConvertIdAndValidate(varEntry);
                pieceInPositionSeleted = $(idSquare)[0].innerText;
                positionSelected = idSquare;
                
                ValidateMove(pieceSelected, positionInitial, positionSelected);
        ");
                WriteLiteral(@"    });

            function ConvertIdAndValidate(varEntry) {

                var letters = [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""];
                var newArray = [];
                var idSquare = varEntry.split(""""); //varEntry.toArray(); //Array.from(varEntry);

                if (idSquare.length != null && (idSquare.length > 2 || idSquare.length < 2)) {
                    alert(""Insert row-column"");
                    return;
                }

                if ($.isNumeric(idSquare[0])) {
                    if (idSquare[0] < 1 || idSquare[0] > 8) {
                        alert(""Insert values ​​from 1 to 8"");
                        return;
                    }
                    else {
                        if (jQuery.inArray(idSquare[1], letters) === -1) {
                            alert(""Insert values ​​from a to h"");
                        } else {
                            newArray.push(""#"");
                            newArray.push(idSquare[0]);
          ");
                WriteLiteral(@"                  newArray.push(idSquare[1]);

                            var newString = (newArray.toString()).replace(',', '');
                            newString = newString.replace(',', '');

                            var squareVar = $(newString)[0].innerText; //$(newString).val();
                            if (squareVar == null) {
                                alert(""Empty square"");
                                return;
                            }
                        }

                        return newString;
                    }
                }
                else {
                    if ($.isNumeric(idSquare[1])) {
                        if (idSquare[1] < 1 || idSquare[1] > 8) {
                            alert(""Insert values ​​from 1 to 8"");
                            return;
                        }
                        else {
                            if (jQuery.inArray(idSquare[0], letters) === -1) {
                                alert(""Ins");
                WriteLiteral(@"ert values ​​from a to h"");
                            } else {
                                newArray.push(""#"");
                                newArray.push(idSquare[1]);
                                newArray.push(idSquare[0]);

                                var newString = (newArray.toString()).replace(',', '');
                                newString = newString.replace(',', '');

                                var squareVar = $(newString)[0].innerText; //$(newString).val();
                                if (squareVar == null) {
                                    alert(""Empty square"");
                                    return;
                                }
                            }

                            return newString;
                        }

                    }
                }
            }

            function ValidateMove(pieceSelected, positionInitial, positionSelected) {

                // what piece
                var canPieceMove");
                WriteLiteral(@" = findOutPiece(pieceSelected, positionInitial, positionSelected); // averiguo si es permitido el movimiento
                var colorPieceToMove = """";
                var colorPieceInNewPosition = ""1"";

                alert(""move canPieceMove "" + canPieceMove);

                if (!canPieceMove) {
                    alert(""It's not a valid move for this piece"");
                }
                else {
                    //si hay una pieza en la nueva posición
                    if ($(positionSelected)[0].innerText != null || $(positionSelected)[0].innerText != """") {
                        if (colorPieceInNewPosition == colorPieceToMove) {
                            alert(""You can 't eat pieces of the same color"");
                        }
                        else {
                            //coloco la pieza en la nueva posicion 
                            $(positionInitial).empty();
                            $(positionSelected).append(pieceSelected);
                    ");
                WriteLiteral(@"    }
                    }
                    else {
                        // se procede a realizar el movimiento
                        $(positionInitial).empty();
                        $(positionSelected).append(pieceSelected);
                    }
                }
                
            }

            function findOutPiece(pieceSelected, positionInitial, positionSelected) {

                switch (pieceSelected) {
                    case ""♟"": //pawn black
                        //si es negro tiene que moverse en la misma columna de mayor a menor
                        return getMovePawn(false, positionInitial, positionSelected);
                        break;
                    case ""♙"": //pawn white
                        //si es blanco tiene que moverse en la misma columna de menor a mayor
                        return getMovePawn(true, positionInitial, positionSelected);
                        break;
                    case ""♜"": //tower black
              ");
                WriteLiteral(@"          return getMoveTower(positionInitial, positionSelected);
                        break;
                    case ""♖"": //tower white
                        return getMoveTower(positionInitial, positionSelected);
                        break;
                    case ""♝"": //bishop black
                        return getMoveBishop(positionInitial, positionSelected);
                        break;
                    case ""♗"": //bishop white
                        return getMoveBishop(positionInitial, positionSelected);
                        break;
                    case ""♞"": //horse black
                        return getMoveHorse(positionInitial, positionSelected);
                        break;
                    case ""♘"": //horse white
                        return getMoveHorse(positionInitial, positionSelected);
                        break;
                    case ""♛"": //queen black
                        return getMoveQueen(positionInitial, positionSelected);
     ");
                WriteLiteral(@"                   break;
                    case ""♕"": //queen white
                        return getMoveQueen(positionInitial, positionSelected);
                        break;
                    case ""♚"": //king black
                        return getMoveKing(positionInitial, positionSelected);
                        break;
                    case ""♔"": //king white
                        return getMoveKing(positionInitial, positionSelected);
                        break;
                }
            }

            // function move of piece
            function getMovePawn(boolColor, positionInitial, positionSelected) {

                blackPawnRowFirst = ""7"";
                whitePawnRowFirst = ""2"";

                arrayPositionInitial = positionInitial.split("""");
                arrayPositionSelected = positionSelected.split("""");

                //boolColor = true (white)
                if (boolColor) {

                    // si es misma columna puede moverse siempre");
                WriteLiteral(@" y cuando sea de a una casilla
                    var restWhite = parseInt(arrayPositionSelected[1]) - parseInt(arrayPositionInitial[1]);
                    if (arrayPositionInitial[2] == arrayPositionSelected[2]) {
                        if (restWhite.toString() === ""1"") {
                            return true;
                        } else {
                            return false; } 
                    }
                    else {
                        var idx = row.indexOf(arrayPositionInitial[1]);
                        var rowBefore = row[idx - 1];
                        var rowAfter = row[idx + 1];

                        //puede comer
                        if (arrayPositionSelected[1] == rowBefore || arrayPositionInitial[1] == rowAfter) {
                            return true;
                        } else { return false; }
                    }
                }
                else {
                    // si es misma columna puede moverse siempre y cuando sea d");
                WriteLiteral(@"e una casilla
                    var restBlack = parseInt(arrayPositionInitial[1]) - parseInt(arrayPositionSelected[1]);
                    if (arrayPositionInitial[2] == arrayPositionSelected[2]) {
                        if (restBlack.toString() === ""1"") {
                            return true;
                        } else {
                            return false;
                        }
                    }
                    else {
                        var idx = row.indexOf(arrayPositionInitial[1]);
                        var rowBefore = row[idx - 1];
                        var rowAfter = row[idx + 1];

                        //puede comer
                        if (arrayPositionInitial[1] == rowBefore || arrayPositionInitial[1] == rowAfter) {
                            return true;
                        } else { return false; }
                    }
                }
            }

            function getMoveTower(positionInitial, positionSelected) {

      ");
                WriteLiteral(@"          var arrayPositionInitial = positionInitial.split("""");
                var arrayPositionSelected = positionSelected.split("""");
                
                if ((arrayPositionInitial[2] == arrayPositionSelected[2])
                    || (arrayPositionInitial[1] == arrayPositionSelected[1]))
                {
                    //se mueve en la misma columna
                    if (arrayPositionInitial[2] == arrayPositionSelected[2]) {
                        //se mueve hacia abajo
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var existPiecesDownUp = ExistPiecesTheWay(true, true, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesDownUp) { return false; }
                            else { return true; }
                            
                        }

                        //se mueve hacia arriba
                        if (arrayPositionInitial[1] < arrayPositionSelecte");
                WriteLiteral(@"d[1]) {
                            var existPiecesUpDown = ExistPiecesTheWay(true, false, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesUpDown) { return false; }
                            else { return true; }
                        }
                    }

                    //se mueve en la misma fila
                    if (arrayPositionInitial[1] == arrayPositionSelected[1]) {
                        // se mueve a derecha ->
                        if (arrayPositionInitial[2] < arrayPositionSelected[2]) {
                            var existPiecesR = ExistPiecesTheWay(false, true, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesR) { return false; }
                            else { return true; }

                        }

                        // se mueve a izquierda <-
                        if (arrayPositionInitial[2] > arrayPositionSelected[2]) {
                            var existPieces");
                WriteLiteral(@"L = ExistPiecesTheWay(false, false, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesL) { return false; }
                            else { return true; }
                        }
                    }
                } else {
                    return false;
                }
            }

            function getMoveBishop(positionInitial, positionSelected) {

                alert(""bishop"");

                row = (""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"");

                var arrayPositionInitial = positionInitial.split("""");
                var arrayPositionSelected = positionSelected.split("""");
                var idx = row.indexOf(arrayPositionInitial[2].toString());
                var idxS = row.indexOf(arrayPositionSelected[2].toString());

                alert(""arrayPositionInitial[2] "" + arrayPositionInitial[2].toString());
                alert(""idx "" + idx);

                alert(""arrayPositionSelected[2] "" + arrayPositionSelect");
                WriteLiteral(@"ed[2].toString());
                alert(""idxS "" + idxS);

                if ((arrayPositionInitial[2] == arrayPositionSelected[2])
                    || (arrayPositionInitial[1] == arrayPositionSelected[1])) {
                    return false;
                }
                else
                {
                    //derecha 
                    if (idx < idxS) { 
                        // arriba 
                        if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(true, true, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }

                        // abajo 
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(true, false, arrayPositionInitial, arrayPositionSelected);
 ");
                WriteLiteral(@"                           if (resultMov) { return false; }
                            else { return true; }
                        }
                    }

                    //izquierda  
                    if (idx > idxS) { 
                        // arriba 
                        if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(false, true, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }

                        // abajo 
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(false, false, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }
     ");
                WriteLiteral(@"               }
                }

            }

            function getMoveHorse(positionInitial, positionSelected) {

                var arrayPositionInitial = positionInitial.split("""");
                var arrayPositionSelected = positionSelected.split("""");
                var idx = row.indexOf(arrayPositionInitial[2]);
                var idxS = row.indexOf(arrayPositionSelected[2]);

                var valueAbsC = Math.abs(arrayPositionInitial[1] - arrayPositionSelected[1]);
                var valueAbsR = Math.abs(idxS - idx);

                if ((valueAbsC != 2 && valueAbsR == 1)
                    || (valueAbsC == 2 && valueAbsR != 1)
                    || (valueAbsC != 1 && valueAbsR == 2)
                    || (valueAbsC == 1 && valueAbsR != 2)) {
                    return false;
                }
            }

            function getMoveQueen(boolColor, positionInitial, positionSelected) {
                arrayPositionInitial = positionInitial.split("""");
       ");
                WriteLiteral(@"         arrayPositionSelected = positionSelected.split("""");

                var idx = row.indexOf(arrayPositionInitial[2]);
                var idxS = row.indexOf(arrayPositionSelected[2]);

                //se mueve en la misma columna
                if (arrayPositionInitial[2] == arrayPositionSelected[2]) {
                    //se mueve hacia abajo
                    if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                        var existPiecesDownUp = ExistPiecesTheWay(true, true, arrayPositionInitial, arrayPositionSelected);
                        if (existPiecesDownUp) { return false; }
                        else { return true; }

                    }

                    //se mueve hacia arriba
                    if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                        var existPiecesUpDown = ExistPiecesTheWay(true, false, arrayPositionInitial, arrayPositionSelected);
                        if (existPiecesUpDown) { return false; }");
                WriteLiteral(@"
                        else { return true; }
                    }
                }

                //se mueve en la misma fila
                if (arrayPositionInitial[1] == arrayPositionSelected[1]) {
                    // se mueve a derecha ->
                    if (arrayPositionInitial[2] < arrayPositionSelected[2]) {
                        var existPiecesR = ExistPiecesTheWay(false, true, arrayPositionInitial, arrayPositionSelected);
                        if (existPiecesR) { return false; }
                        else { return true; }

                    }

                    // se mueve a izquierda <-
                    if (arrayPositionInitial[2] > arrayPositionSelected[2]) {
                        var existPiecesL = ExistPiecesTheWay(false, false, arrayPositionInitial, arrayPositionSelected);
                        if (existPiecesL) { return false; }
                        else { return true; }
                    }
                }

                //Diagonal d");
                WriteLiteral(@"erecha
                if (idx < idxS) {
                    // arriba 
                    if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                        var resultMov = ExistPiecesTheWayDiagonal(true, true, arrayPositionInitial, arrayPositionSelected);
                        if (resultMov) { return false; }
                        else { return true; }
                    }

                    // abajo 
                    if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                        var resultMov = ExistPiecesTheWayDiagonal(true, false, arrayPositionInitial, arrayPositionSelected);
                        if (resultMov) { return false; }
                        else { return true; }
                    }
                }

                //Diagonal izquierda  
                if (idx < idxS) {
                    // arriba 
                    if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                        var resultMov = Exis");
                WriteLiteral(@"tPiecesTheWayDiagonal(false, true, arrayPositionInitial, arrayPositionSelected);
                        if (resultMov) { return false; }
                        else { return true; }
                    }

                    // abajo 
                    if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                        var resultMov = ExistPiecesTheWayDiagonal(false, false, arrayPositionInitial, arrayPositionSelected);
                        if (resultMov) { return false; }
                        else { return true; }
                    }
                }
            }

            function getMoveKing(positionInitial, positionSelected) {

                arrayPositionInitial = positionInitial.split("""");
                arrayPositionSelected = positionSelected.split("""");

                var idx = row.indexOf(arrayPositionInitial[2]);
                var idxS = row.indexOf(arrayPositionSelected[2]);

                var valueAbsC = Math.abs(arrayPositionInitial[1] -");
                WriteLiteral(@" arrayPositionSelected[1]);
                var valueAbsR = Math.abs(idxS - idx);

                if ((valueAbsC == 0 || valueAbsC == 1) && valueAbsR == 1) {

                    //se mueve en la misma columna
                    if (arrayPositionInitial[2] == arrayPositionSelected[2]) {
                        //se mueve hacia abajo
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var existPiecesDownUp = ExistPiecesTheWay(true, true, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesDownUp) { return false; }
                            else { return true; }

                        }

                        //se mueve hacia arriba
                        if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                            var existPiecesUpDown = ExistPiecesTheWay(true, false, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesUpDown) { ");
                WriteLiteral(@"return false; }
                            else { return true; }
                        }
                    }

                    //se mueve en la misma fila
                    if (arrayPositionInitial[1] == arrayPositionSelected[1]) {
                        // se mueve a derecha ->
                        if (arrayPositionInitial[2] < arrayPositionSelected[2]) {
                            var existPiecesR = ExistPiecesTheWay(false, true, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesR) { return false; }
                            else { return true; }

                        }

                        // se mueve a izquierda <-
                        if (arrayPositionInitial[2] > arrayPositionSelected[2]) {
                            var existPiecesL = ExistPiecesTheWay(false, false, arrayPositionInitial, arrayPositionSelected);
                            if (existPiecesL) { return false; }
                            else { return tr");
                WriteLiteral(@"ue; }
                        }
                    }
                                        
                    //Diagonal derecha
                    if (idx < idxS) {
                        // arriba 
                        if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(true, true, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }

                        // abajo 
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(true, false, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }
                    }

                    //Diagonal izquierda  ");
                WriteLiteral(@"
                    if (idx < idxS) {
                        // arriba 
                        if (arrayPositionInitial[1] < arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(false, true, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }

                        // abajo 
                        if (arrayPositionInitial[1] > arrayPositionSelected[1]) {
                            var resultMov = ExistPiecesTheWayDiagonal(false, false, arrayPositionInitial, arrayPositionSelected);
                            if (resultMov) { return false; }
                            else { return true; }
                        }
                    }
                    
                }
                else {
                    return false;
                }
            }

            //lineal 
            function E");
                WriteLiteral(@"xistPiecesTheWay(boolWay, boolWayTow, arrayPositionInitial, arrayPositionSelected)
            {
                var i = arrayPositionInitial[1];

                //boolWay: si es columna true
                //boolWayTow: para abajo true
                if (boolWay && boolWayTow) {
                    i--;
                    for (i; i >= arrayPositionSelected[1]; i--) {
                        var id = ""#"" + i + arrayPositionSelected[2];
                        if ($(id)[0].innerText != """") {
                            return true;
                            break;
                        }
                    }
                    return false;
                }

                //boolWay: si es columna true
                //boolWayTow: para arriba false
                if (boolWay && boolWayTow == false) {
                    i++;
                    for (i; i <= arrayPositionSelected[1]; i++) {
                        var id = ""#"" + i + arrayPositionSelected[2];
               ");
                WriteLiteral(@"         if ($(id)[0].innerText != """") {
                            return true;
                            break;
                        }
                    }
                    return false;
                }

                //boolWay: si es fila = false
                //boolWayTow: para derecha true ->
                if (boolWay == false && boolWayTow) {

                    var idx = row.indexOf(arrayPositionInitial[2]);
                    var idxS = row.indexOf(arrayPositionSelected[2]);

                    idx++;

                    for (i = idx; i <= idxS; i++) {
                        var id = ""#"" + i + arrayPositionSelected[2];
                        if ($(id)[0].innerText != """") {
                            return true;
                            break;
                        }
                    }
                    return false;
                }

                //boolWay: si es fila = false
                //boolWayTow: para izquierda false <-
    ");
                WriteLiteral(@"            if (boolWay == false && boolWayTow == false) {

                    var idx = row.indexOf(arrayPositionInitial[2]);
                    var idxS = row.indexOf(arrayPositionSelected[2]);

                    idx--;

                    for (i = idx; i >= idxS; i--) {
                        var id = ""#"" + i + arrayPositionSelected[2];
                        if ($(id)[0].innerText == """") {
                            return true;
                            break;
                        }
                    }
                    return false;
                }

        }

            //diagonal 
            function ExistPiecesTheWayDiagonal(boolWay, boolWayTow, arrayPositionInitial, arrayPositionSelected)
            {

                var i = arrayPositionInitial[1];
                var idx = row.indexOf(arrayPositionInitial[2]);
                var idxS = row.indexOf(arrayPositionSelected[2]);

                alert(""DIAGONAL"");
                //boolWay: si es dere");
                WriteLiteral(@"cha true
                //boolWayTow: para arriba true
                if (boolWay && boolWayTow) {
                    i++;
                    idx++;

                    for (i; i <= arrayPositionSelected[1]; i++) {
                        for (idx; idx <= idxS[1]; idx++) {

                            alert(""id: "" + id);

                            var id = ""#"" + i + row[idx];
                            if ($(id)[0].innerText != """") {
                                return true;
                                break;
                            }
                        }
                    }
                    return false;
                }

                //boolWay: si es derecha true
                //boolWayTow: para abajo false
                if (boolWay && boolWayTow == false) {
                    i--;
                    idx++;

                    for (i; i >= arrayPositionSelected[1]; i--) {
                        for (idx; idx <= idxS[1]; idx++) {
         ");
                WriteLiteral(@"                   var id = ""#"" + i + row[idx];

                            alert(""id: "" + id);

                            if ($(id)[0].innerText != """") {
                                return true;
                                break;
                            }
                        }
                    }
                    return false;
                }

                //boolWay: si es izquierda false
                //boolWayTow: para arriba true
                if (boolWay == false && boolWayTow) {
                    i++;
                    idx--;

                    for (i; i <= arrayPositionSelected[1]; i++) {
                        for (idx; idx >= idxS[1]; idx--) {
                            var id = ""#"" + i + row[idx];

                            alert(""id: "" + id);

                            if ($(id)[0].innerText != """") {
                                return true;
                                break;
                            }
             ");
                WriteLiteral(@"           }
                    }
                    return false;
                }

                //boolWay: si es izquierda false
                //boolWayTow: para abajo false
                if (boolWay == false && boolWayTow) {
                    i--;
                    idx--;

                    for (i; i >= arrayPositionSelected[1]; i--) {
                        for (idx; idx >= idxS[1]; idx--) {
                            var id = ""#"" + i + row[idx];

                            alert(""id: "" + id);

                            if ($(id)[0].innerText != """") {
                                return true;
                                break;
                            }
                        }
                    }
                    return false;
                }
            }

});
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<ChessProject.Models.Square>> Html { get; private set; }
    }
}
#pragma warning restore 1591
